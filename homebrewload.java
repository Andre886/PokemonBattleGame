/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package giocofinal;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;

/**
 *
 * @author andrea
 */
public class homebrewload extends javax.swing.JFrame {

    /**
     * Creates new form homebrewload
     */
    public homebrewload() {
        initComponents();
                setLocationRelativeTo(null);
        
                first();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loading = new javax.swing.JLabel();
        github = new javax.swing.JLabel();
        data = new javax.swing.JLabel();
        presentazione = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(693, 750));
        setMinimumSize(new java.awt.Dimension(693, 750));
        setPreferredSize(new java.awt.Dimension(693, 750));
        setSize(new java.awt.Dimension(693, 750));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loading.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        loading.setForeground(new java.awt.Color(255, 255, 255));
        loading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(loading, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 270, 30));

        github.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        github.setForeground(new java.awt.Color(255, 255, 255));
        github.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(github, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 320, 30));

        data.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        data.setForeground(new java.awt.Color(255, 255, 255));
        data.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(data, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 180, 30));

        presentazione.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        presentazione.setForeground(new java.awt.Color(255, 255, 255));
        presentazione.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(presentazione, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, 160, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/giocofinal/nero.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/giocofinal/nero.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 700, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(homebrewload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(homebrewload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(homebrewload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(homebrewload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new homebrewload().setVisible(true);
            }
        });
    }

    public void first() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            jLabel1.setIcon(new ImageIcon(getClass().getResource("nero.png")));
            jLabel2.setIcon(new ImageIcon(getClass().getResource("nero.png")));
            presentazione();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 1000L;
    timer.schedule(task, delay);
}
    
    
    public void presentazione() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            presentazione.setText("Hax 2.3 Alpha");
            data();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 500L;
    timer.schedule(task, delay);
}
    
    public void data() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            Calendar calendar = GregorianCalendar.getInstance();
        String orologiov = calendar.get(Calendar.DATE) + "/" + (calendar.get(Calendar.MONTH) + 1) + "/" + calendar.get(Calendar.YEAR);
        Current a = new Current ();
        String orav2 = a.ora() + "";
        
            data.setText(orologiov + " " + orav2);
            git();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 500L;
    timer.schedule(task, delay);
}
    
    public void git() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            
            github.setText("https://github.com/Andre886");
            loading();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 500L;
    timer.schedule(task, delay);
}
    
    public void loading() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            
            AudioPlayer.playInLoop("homebrew.wav");
            loading.setText("Loading Homebrew Launcher");
            jLabel2.setIcon(new ImageIcon(getClass().getResource("rosso.png")));
            verde();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 500L;
    timer.schedule(task, delay);
}
    
    public void verde() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            
            
            jLabel2.setIcon(new ImageIcon(getClass().getResource("verde.png")));
            blu();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 150L;
    timer.schedule(task, delay);
}
    
    public void blu() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            
            
            jLabel2.setIcon(new ImageIcon(getClass().getResource("blu.png")));
            giallo();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 150L;
    timer.schedule(task, delay);
}
    public void giallo() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            
            
            jLabel2.setIcon(new ImageIcon(getClass().getResource("giallo.png")));
            complete();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 150L;
    timer.schedule(task, delay);
}
    
    public void complete() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            
            loading.setText("Load Complete");
            jLabel2.setIcon(new ImageIcon(getClass().getResource("nero.png")));
            change();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 150L;
    timer.schedule(task, delay);
}
    
    public void change() {
    TimerTask task = new TimerTask() {
        public void run() {
            System.out.println("Task performed on: " + new Date() + "n" +
              "Thread's name: " + Thread.currentThread().getName());
            
            cambia();
        }
    };
    Timer timer = new Timer("Timer");
    
    long delay = 1000L;
    timer.schedule(task, delay);
}
    
    
    public void cambia () {
        this.setVisible(false);
        new homebrewlauncher().setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel data;
    private javax.swing.JLabel github;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel loading;
    private javax.swing.JLabel presentazione;
    // End of variables declaration//GEN-END:variables
}
